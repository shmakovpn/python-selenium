"""
This type stub file was generated by pyright.
"""

import unittest
from unittest import TestCase
from bs4.builder import HTMLParserTreeBuilder

"""Helper classes for tests."""
__license__ = "MIT"
default_builder = HTMLParserTreeBuilder
BAD_DOCUMENT = """A bare string
<!DOCTYPE xsl:stylesheet SYSTEM "htmlent.dtd">
<!DOCTYPE xsl:stylesheet PUBLIC "htmlent.dtd">
<div><![CDATA[A CDATA section where it doesn't belong]]></div>
<div><svg><![CDATA[HTML5 does allow CDATA sections in SVG]]></svg></div>
<div>A <meta> tag</div>
<div>A <br> tag that supposedly has contents.</br></div>
<div>AT&T</div>
<div><textarea>Within a textarea, markup like <b> tags and <&<&amp; should be treated as literal</textarea></div>
<div><script>if (i < 2) { alert("<b>Markup within script tags should be treated as literal.</b>"); }</script></div>
<div>This numeric entity is missing the final semicolon: <x t="pi&#241ata"></div>
<div><a href="http://example.com/</a> that attribute value never got closed</div>
<div><a href="foo</a>, </a><a href="bar">that attribute value was closed by the subsequent tag</a></div>
<! This document starts with a bogus declaration ><div>a</div>
<div>This document contains <!an incomplete declaration <div>(do you see it?)</div>
<div>This document ends with <!an incomplete declaration
<div><a style={height:21px;}>That attribute value was bogus</a></div>
<! DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN">The doctype is invalid because it contains extra whitespace
<div><table><td nowrap>That boolean attribute had no value</td></table></div>
<div>Here's a nonexistent entity: &#foo; (do you see it?)</div>
<div>This document ends before the entity finishes: &gt
<div><p>Paragraphs shouldn't contain block display elements, but this one does: <dl><dt>you see?</dt></p>
<b b="20" a="1" b="10" a="2" a="3" a="4">Multiple values for the same attribute.</b>
<div><table><tr><td>Here's a table</td></tr></table></div>
<div><table id="1"><tr><td>Here's a nested table:<table id="2"><tr><td>foo</td></tr></table></td></div>
<div>This tag contains nothing but whitespace: <b>    </b></div>
<div><blockquote><p><b>This p tag is cut off by</blockquote></p>the end of the blockquote tag</div>
<div><table><div>This table contains bare markup</div></table></div>
<div><div id="1">\n <a href="link1">This link is never closed.\n</div>\n<div id="2">\n <div id="3">\n   <a href="link2">This link is closed.</a>\n  </div>\n</div></div>
<div>This document contains a <!DOCTYPE surprise>surprise doctype</div>
<div><a><B><Cd><EFG>Mixed case tags are folded to lowercase</efg></CD></b></A></div>
<div><our\u2603>Tag name contains Unicode characters</our\u2603></div>
<div><a \u2603="snowman">Attribute name contains Unicode characters</a></div>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
"""
class SoupTest(unittest.TestCase):
    @property
    def default_builder(self):
        ...
    
    def soup(self, markup, **kwargs):
        """Build a Beautiful Soup object from markup."""
        ...
    
    def document_for(self, markup, **kwargs):
        """Turn an HTML fragment into a document.

        The details depend on the builder.
        """
        ...
    
    def assertSoupEquals(self, to_parse, compare_parsed_to=...):
        ...
    
    def assertConnectedness(self, element):
        """Ensure that next_element and previous_element are properly
        set for all descendants of the given element.
        """
        ...
    
    def linkage_validator(self, el, _recursive_call=...):
        """Ensure proper linkage throughout the document."""
        ...
    


class HTMLTreeBuilderSmokeTest(object):
    """A basic test of a treebuilder's competence.

    Any HTML treebuilder, present or future, should be able to pass
    these tests. With invalid markup, there's room for interpretation,
    and different parsers can handle it differently. But with the
    markup in these tests, there's not much room for interpretation.
    """
    def test_empty_element_tags(self):
        """Verify that all HTML4 and HTML5 empty element (aka void element) tags
        are handled correctly.
        """
        ...
    
    def test_special_string_containers(self):
        ...
    
    def test_pickle_and_unpickle_identity(self):
        ...
    
    def assertDoctypeHandled(self, doctype_fragment):
        """Assert that a given doctype string is handled correctly."""
        ...
    
    def test_normal_doctypes(self):
        """Make sure normal, everyday HTML doctypes are handled correctly."""
        ...
    
    def test_empty_doctype(self):
        ...
    
    def test_mixed_case_doctype(self):
        ...
    
    def test_public_doctype_with_url(self):
        ...
    
    def test_system_doctype(self):
        ...
    
    def test_namespaced_system_doctype(self):
        ...
    
    def test_namespaced_public_doctype(self):
        ...
    
    def test_real_xhtml_document(self):
        """A real XHTML document should come out more or less the same as it went in."""
        ...
    
    def test_namespaced_html(self):
        """When a namespaced XML document is parsed as HTML it should
        be treated as HTML with weird tag names.
        """
        ...
    
    def test_processing_instruction(self):
        ...
    
    def test_deepcopy(self):
        """Make sure you can copy the tree builder.

        This is important because the builder is part of a
        BeautifulSoup object, and we want to be able to copy that.
        """
        ...
    
    def test_p_tag_is_never_empty_element(self):
        """A <p> tag is never designated as an empty-element tag.

        Even if the markup shows it as an empty-element tag, it
        shouldn't be presented that way.
        """
        ...
    
    def test_unclosed_tags_get_closed(self):
        """A tag that's not closed by the end of the document should be closed.

        This applies to all tags except empty-element tags.
        """
        ...
    
    def test_br_is_always_empty_element_tag(self):
        """A <br> tag is designated as an empty-element tag.

        Some parsers treat <br></br> as one <br/> tag, some parsers as
        two tags, but it should always be an empty-element tag.
        """
        ...
    
    def test_nested_formatting_elements(self):
        ...
    
    def test_double_head(self):
        ...
    
    def test_comment(self):
        ...
    
    def test_preserved_whitespace_in_pre_and_textarea(self):
        """Whitespace must be preserved in <pre> and <textarea> tags,
        even if that would mean not prettifying the markup.
        """
        ...
    
    def test_nested_inline_elements(self):
        """Inline elements can be nested indefinitely."""
        ...
    
    def test_nested_block_level_elements(self):
        """Block elements can be nested."""
        ...
    
    def test_correctly_nested_tables(self):
        """One table can go inside another one."""
        ...
    
    def test_multivalued_attribute_with_whitespace(self):
        ...
    
    def test_deeply_nested_multivalued_attribute(self):
        ...
    
    def test_multivalued_attribute_on_html(self):
        ...
    
    def test_angle_brackets_in_attribute_values_are_escaped(self):
        ...
    
    def test_strings_resembling_character_entity_references(self):
        ...
    
    def test_apos_entity(self):
        ...
    
    def test_entities_in_foreign_document_encoding(self):
        ...
    
    def test_entities_in_attributes_converted_to_unicode(self):
        ...
    
    def test_entities_in_text_converted_to_unicode(self):
        ...
    
    def test_quot_entity_converted_to_quotation_mark(self):
        ...
    
    def test_out_of_range_entity(self):
        ...
    
    def test_multipart_strings(self):
        "Mostly to prevent a recurrence of a bug in the html5lib treebuilder."
        ...
    
    def test_empty_element_tags(self):
        """Verify consistent handling of empty-element tags,
        no matter how they come in through the markup.
        """
        ...
    
    def test_head_tag_between_head_and_body(self):
        "Prevent recurrence of a bug in the html5lib treebuilder."
        ...
    
    def test_multiple_copies_of_a_tag(self):
        "Prevent recurrence of a bug in the html5lib treebuilder."
        ...
    
    def test_basic_namespaces(self):
        """Parsers don't need to *understand* namespaces, but at the
        very least they should not choke on namespaces or lose
        data."""
        ...
    
    def test_multivalued_attribute_value_becomes_list(self):
        ...
    
    def test_can_parse_unicode_document(self):
        ...
    
    def test_soupstrainer(self):
        """Parsers should be able to work with SoupStrainers."""
        ...
    
    def test_single_quote_attribute_values_become_double_quotes(self):
        ...
    
    def test_attribute_values_with_nested_quotes_are_left_alone(self):
        ...
    
    def test_attribute_values_with_double_nested_quotes_get_quoted(self):
        ...
    
    def test_ampersand_in_attribute_value_gets_escaped(self):
        ...
    
    def test_escaped_ampersand_in_attribute_value_is_left_alone(self):
        ...
    
    def test_entities_in_strings_converted_during_parsing(self):
        ...
    
    def test_smart_quotes_converted_on_the_way_in(self):
        ...
    
    def test_non_breaking_spaces_converted_on_the_way_in(self):
        ...
    
    def test_entities_converted_on_the_way_out(self):
        ...
    
    def test_real_iso_latin_document(self):
        ...
    
    def test_real_shift_jis_document(self):
        ...
    
    def test_real_hebrew_document(self):
        ...
    
    def test_meta_tag_reflects_current_encoding(self):
        ...
    
    def test_html5_style_meta_tag_reflects_current_encoding(self):
        ...
    
    def test_python_specific_encodings_not_used_in_charset(self):
        ...
    
    def test_tag_with_no_attributes_can_have_attributes_added(self):
        ...
    
    def test_closing_tag_with_no_opening_tag(self):
        ...
    
    def test_worst_case(self):
        """Test the worst case (currently) for linking issues."""
        ...
    


class XMLTreeBuilderSmokeTest(object):
    def test_pickle_and_unpickle_identity(self):
        ...
    
    def test_docstring_generated(self):
        ...
    
    def test_xml_declaration(self):
        ...
    
    def test_python_specific_encodings_not_used_in_xml_declaration(self):
        ...
    
    def test_processing_instruction(self):
        ...
    
    def test_real_xhtml_document(self):
        """A real XHTML document should come out *exactly* the same as it went in."""
        ...
    
    def test_nested_namespaces(self):
        ...
    
    def test_formatter_processes_script_tag_for_xml_documents(self):
        ...
    
    def test_can_parse_unicode_document(self):
        ...
    
    def test_popping_namespaced_tag(self):
        ...
    
    def test_docstring_includes_correct_encoding(self):
        ...
    
    def test_large_xml_document(self):
        """A large XML document should come out the same as it went in."""
        ...
    
    def test_tags_are_empty_element_if_and_only_if_they_are_empty(self):
        ...
    
    def test_namespaces_are_preserved(self):
        ...
    
    def test_closing_namespaced_tag(self):
        ...
    
    def test_namespaced_attributes(self):
        ...
    
    def test_namespaced_attributes_xml_namespace(self):
        ...
    
    def test_find_by_prefixed_name(self):
        ...
    
    def test_copy_tag_preserves_namespace(self):
        ...
    
    def test_worst_case(self):
        """Test the worst case (currently) for linking issues."""
        ...
    


class HTML5TreeBuilderSmokeTest(HTMLTreeBuilderSmokeTest):
    """Smoke test for a tree builder that supports HTML5."""
    def test_real_xhtml_document(self):
        ...
    
    def test_html_tags_have_namespace(self):
        ...
    
    def test_svg_tags_have_namespace(self):
        ...
    
    def test_mathml_tags_have_namespace(self):
        ...
    
    def test_xml_declaration_becomes_comment(self):
        ...
    


def skipIf(condition, reason):
    ...

