"""
This type stub file was generated by pyright.
"""

from bs4.builder import HTMLTreeBuilder

__license__ = "MIT"
class HTML5TreeBuilder(HTMLTreeBuilder):
    """Use html5lib to build a tree.

    Note that this TreeBuilder does not support some features common
    to HTML TreeBuilders. Some of these features could theoretically
    be implemented, but at the very least it's quite difficult,
    because html5lib moves the parse tree around as it's being built.

    * This TreeBuilder doesn't use different subclasses of NavigableString
      based on the name of the tag in which the string was found.

    * You can't use a SoupStrainer to parse only part of a document.
    """
    NAME = ...
    features = ...
    TRACKS_LINE_NUMBERS = ...
    def prepare_markup(self, markup, user_specified_encoding, document_declared_encoding=..., exclude_encodings=...):
        ...
    
    def feed(self, markup):
        ...
    
    def create_treebuilder(self, namespaceHTMLElements):
        ...
    
    def test_fragment_to_document(self, fragment):
        """See `TreeBuilder`."""
        ...
    


class TreeBuilderForHtml5lib(treebuilder_base.TreeBuilder):
    def __init__(self, namespaceHTMLElements, soup=..., store_line_numbers=..., **kwargs) -> None:
        ...
    
    def documentClass(self):
        ...
    
    def insertDoctype(self, token):
        ...
    
    def elementClass(self, name, namespace):
        ...
    
    def commentClass(self, data):
        ...
    
    def fragmentClass(self):
        ...
    
    def appendChild(self, node):
        ...
    
    def getDocument(self):
        ...
    
    def getFragment(self):
        ...
    
    def testSerializer(self, element):
        ...
    


class AttrList(object):
    def __init__(self, element) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def __setitem__(self, name, value):
        ...
    
    def items(self):
        ...
    
    def keys(self):
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, name):
        ...
    
    def __contains__(self, name):
        ...
    


class Element(treebuilder_base.Node):
    def __init__(self, element, soup, namespace) -> None:
        ...
    
    def appendChild(self, node):
        ...
    
    def getAttributes(self):
        ...
    
    def setAttributes(self, attributes):
        ...
    
    attributes = ...
    def insertText(self, data, insertBefore=...):
        ...
    
    def insertBefore(self, node, refNode):
        ...
    
    def removeChild(self, node):
        ...
    
    def reparentChildren(self, new_parent):
        """Move all of this tag's children into another tag."""
        ...
    
    def cloneNode(self):
        ...
    
    def hasContent(self):
        ...
    
    def getNameTuple(self):
        ...
    
    nameTuple = ...


class TextNode(Element):
    def __init__(self, element, soup) -> None:
        ...
    
    def cloneNode(self):
        ...
    


