"""
This type stub file was generated by pyright.
"""

from http.client import HTTPConnection, HTTPSConnection
from http.server import BaseHTTPRequestHandler

class ProxyRequestHandler(BaseHTTPRequestHandler):
    protocol_version = ...
    certdir = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def do_CONNECT(self):
        ...
    
    def proxy_request(self):
        ...
    
    do_HEAD = ...
    do_POST = ...
    do_GET = ...
    do_PUT = ...
    do_DELETE = ...
    do_OPTIONS = ...
    do_PATCH = ...
    def handle_one_request(self):
        ...
    
    def finish(self):
        ...
    
    def handle_request(self, req, req_body):
        """Hook method that subclasses should override to process a request.

        If the request body has been modified, it should be returned from the method.
        Returning False will indicate that the response has been committed and no
        further processing will take place.

        Args:
            req: A ProxyRequestHandler instance.
            req_body: The request body as bytes.
        """
        ...
    
    def handle_response(self, req, req_body, res, res_body):
        """Hook method that subclasses should override to process a response.

        If the response body has been modified, it should be returned from the method.

        Args:
            req: The original request - a ProxyRequestHandler instance.
            req_body: The request body as bytes.
            res: The response (a http.client.HTTPResponse instance) that corresponds to the
                request.
            res_body: The response body as bytes.
        """
        ...
    
    def commit_response(self, status, reason, headers, body, conn=...):
        ...
    


class ProxyAwareHTTPConnection(HTTPConnection):
    """A specialised HTTPConnection that will transparently connect to a
    HTTP or SOCKS proxy server based on supplied proxy configuration.
    """
    def __init__(self, proxy_config, netloc, *args, **kwargs) -> None:
        ...
    
    def connect(self):
        ...
    
    def request(self, method, url, body=..., headers=..., *, encode_chunked=...):
        ...
    


class ProxyAwareHTTPSConnection(HTTPSConnection):
    """A specialised HTTPSConnection that will transparently connect to a
    HTTP or SOCKS proxy server based on supplied proxy configuration.
    """
    def __init__(self, proxy_config, netloc, *args, **kwargs) -> None:
        ...
    
    def connect(self):
        ...
    


