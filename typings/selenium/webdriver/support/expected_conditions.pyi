"""
This type stub file was generated by pyright.
"""

class title_is(object):
    """An expectation for checking the title of a page.
    title is the expected title, which must be an exact match
    returns True if the title matches, false otherwise."""
    def __init__(self, title) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class title_contains(object):
    """ An expectation for checking that the title contains a case-sensitive
    substring. title is the fragment of title expected
    returns True when the title matches, False otherwise
    """
    def __init__(self, title) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class presence_of_element_located(object):
    """ An expectation for checking that an element is present on the DOM
    of a page. This does not necessarily mean that the element is visible.
    locator - used to find the element
    returns the WebElement once it is located
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class url_contains(object):
    """ An expectation for checking that the current url contains a
    case-sensitive substring.
    url is the fragment of url expected,
    returns True when the url matches, False otherwise
    """
    def __init__(self, url) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class url_matches(object):
    """An expectation for checking the current url.
    pattern is the expected pattern, which must be an exact match
    returns True if the url matches, false otherwise."""
    def __init__(self, pattern) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class url_to_be(object):
    """An expectation for checking the current url.
    url is the expected url, which must be an exact match
    returns True if the url matches, false otherwise."""
    def __init__(self, url) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class url_changes(object):
    """An expectation for checking the current url.
    url is the expected url, which must not be an exact match
    returns True if the url is different, false otherwise."""
    def __init__(self, url) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class visibility_of_element_located(object):
    """ An expectation for checking that an element is present on the DOM of a
    page and visible. Visibility means that the element is not only displayed
    but also has a height and width that is greater than 0.
    locator - used to find the element
    returns the WebElement once it is located and visible
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class visibility_of(object):
    """ An expectation for checking that an element, known to be present on the
    DOM of a page, is visible. Visibility means that the element is not only
    displayed but also has a height and width that is greater than 0.
    element is the WebElement
    returns the (same) WebElement once it is visible
    """
    def __init__(self, element) -> None:
        ...
    
    def __call__(self, ignored):
        ...
    


class presence_of_all_elements_located(object):
    """ An expectation for checking that there is at least one element present
    on a web page.
    locator is used to find the element
    returns the list of WebElements once they are located
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class visibility_of_any_elements_located(object):
    """ An expectation for checking that there is at least one element visible
    on a web page.
    locator is used to find the element
    returns the list of WebElements once they are located
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class visibility_of_all_elements_located(object):
    """ An expectation for checking that all elements are present on the DOM of a
    page and visible. Visibility means that the elements are not only displayed
    but also has a height and width that is greater than 0.
    locator - used to find the elements
    returns the list of WebElements once they are located and visible
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class text_to_be_present_in_element(object):
    """ An expectation for checking if the given text is present in the
    specified element.
    locator, text
    """
    def __init__(self, locator, text_) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class text_to_be_present_in_element_value(object):
    """
    An expectation for checking if the given text is present in the element's
    locator, text
    """
    def __init__(self, locator, text_) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class frame_to_be_available_and_switch_to_it(object):
    """ An expectation for checking whether the given frame is available to
    switch to.  If the frame is available it switches the given driver to the
    specified frame.
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class invisibility_of_element_located(object):
    """ An Expectation for checking that an element is either invisible or not
    present on the DOM.

    locator used to find the element
    """
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class invisibility_of_element(invisibility_of_element_located):
    """ An Expectation for checking that an element is either invisible or not
    present on the DOM.

    element is either a locator (text) or an WebElement
    """
    ...


class element_to_be_clickable(object):
    """ An Expectation for checking an element is visible and enabled such that
    you can click it."""
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class staleness_of(object):
    """ Wait until an element is no longer attached to the DOM.
    element is the element to wait for.
    returns False if the element is still attached to the DOM, true otherwise.
    """
    def __init__(self, element) -> None:
        ...
    
    def __call__(self, ignored):
        ...
    


class element_to_be_selected(object):
    """ An expectation for checking the selection is selected.
    element is WebElement object
    """
    def __init__(self, element) -> None:
        ...
    
    def __call__(self, ignored):
        ...
    


class element_located_to_be_selected(object):
    """An expectation for the element to be located is selected.
    locator is a tuple of (by, path)"""
    def __init__(self, locator) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class element_selection_state_to_be(object):
    """ An expectation for checking if the given element is selected.
    element is WebElement object
    is_selected is a Boolean."
    """
    def __init__(self, element, is_selected) -> None:
        ...
    
    def __call__(self, ignored):
        ...
    


class element_located_selection_state_to_be(object):
    """ An expectation to locate an element and check if the selection state
    specified is in that state.
    locator is a tuple of (by, path)
    is_selected is a boolean
    """
    def __init__(self, locator, is_selected) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class number_of_windows_to_be(object):
    """ An expectation for the number of windows to be a certain value."""
    def __init__(self, num_windows) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class new_window_is_opened(object):
    """ An expectation that a new window will be opened and have the number of
    windows handles increase"""
    def __init__(self, current_handles) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


class alert_is_present(object):
    """ Expect an alert to be present."""
    def __init__(self) -> None:
        ...
    
    def __call__(self, driver):
        ...
    


