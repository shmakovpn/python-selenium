"""
This type stub file was generated by pyright.
"""

"""
The Proxy implementation.
"""
class ProxyTypeFactory:
    """
    Factory for proxy types.
    """
    @staticmethod
    def make(ff_value, string):
        ...
    


class ProxyType:
    """
    Set of possible types of proxy.

    Each proxy type has 2 properties:
       'ff_value' is value of Firefox profile preference,
       'string' is id of proxy type.
    """
    DIRECT = ...
    MANUAL = ...
    PAC = ...
    RESERVED_1 = ...
    AUTODETECT = ...
    SYSTEM = ...
    UNSPECIFIED = ...
    @classmethod
    def load(cls, value):
        ...
    


class Proxy(object):
    """
    Proxy contains information about proxy type and necessary proxy settings.
    """
    proxyType = ...
    autodetect = ...
    ftpProxy = ...
    httpProxy = ...
    noProxy = ...
    proxyAutoconfigUrl = ...
    sslProxy = ...
    socksProxy = ...
    socksUsername = ...
    socksPassword = ...
    def __init__(self, raw=...) -> None:
        """
        Creates a new Proxy.

        :Args:
         - raw: raw proxy data. If None, default class values are used.
        """
        ...
    
    @property
    def proxy_type(self):
        """
        Returns proxy type as `ProxyType`.
        """
        ...
    
    @proxy_type.setter
    def proxy_type(self, value):
        """
        Sets proxy type.

        :Args:
         - value: The proxy type.
        """
        ...
    
    @property
    def auto_detect(self):
        """
        Returns autodetect setting.
        """
        ...
    
    @auto_detect.setter
    def auto_detect(self, value):
        """
        Sets autodetect setting.

        :Args:
         - value: The autodetect value.
        """
        ...
    
    @property
    def ftp_proxy(self):
        """
        Returns ftp proxy setting.
        """
        ...
    
    @ftp_proxy.setter
    def ftp_proxy(self, value):
        """
        Sets ftp proxy setting.

        :Args:
         - value: The ftp proxy value.
        """
        ...
    
    @property
    def http_proxy(self):
        """
        Returns http proxy setting.
        """
        ...
    
    @http_proxy.setter
    def http_proxy(self, value):
        """
        Sets http proxy setting.

        :Args:
         - value: The http proxy value.
        """
        ...
    
    @property
    def no_proxy(self):
        """
        Returns noproxy setting.
        """
        ...
    
    @no_proxy.setter
    def no_proxy(self, value):
        """
        Sets noproxy setting.

        :Args:
         - value: The noproxy value.
        """
        ...
    
    @property
    def proxy_autoconfig_url(self):
        """
        Returns proxy autoconfig url setting.
        """
        ...
    
    @proxy_autoconfig_url.setter
    def proxy_autoconfig_url(self, value):
        """
        Sets proxy autoconfig url setting.

        :Args:
         - value: The proxy autoconfig url value.
        """
        ...
    
    @property
    def ssl_proxy(self):
        """
        Returns https proxy setting.
        """
        ...
    
    @ssl_proxy.setter
    def ssl_proxy(self, value):
        """
        Sets https proxy setting.

        :Args:
         - value: The https proxy value.
        """
        ...
    
    @property
    def socks_proxy(self):
        """
        Returns socks proxy setting.
        """
        ...
    
    @socks_proxy.setter
    def socks_proxy(self, value):
        """
        Sets socks proxy setting.

        :Args:
         - value: The socks proxy value.
        """
        ...
    
    @property
    def socks_username(self):
        """
        Returns socks proxy username setting.
        """
        ...
    
    @socks_username.setter
    def socks_username(self, value):
        """
        Sets socks proxy username setting.

        :Args:
         - value: The socks proxy username value.
        """
        ...
    
    @property
    def socks_password(self):
        """
        Returns socks proxy password setting.
        """
        ...
    
    @socks_password.setter
    def socks_password(self, value):
        """
        Sets socks proxy password setting.

        :Args:
         - value: The socks proxy password value.
        """
        ...
    
    def add_to_capabilities(self, capabilities):
        """
        Adds proxy information as capability in specified capabilities.

        :Args:
         - capabilities: The capabilities to which proxy will be added.
        """
        ...
    


